import argparse, sys
from .parser import DartClass
from .dartgen import genclass
from .pydantic_source import classes_in_module, pydantic_to_dart

def main():
    p = argparse.ArgumentParser()
    p.add_argument('paths', help="list of .py or .dart files to process", nargs='+')
    p.add_argument('-o', '--output', default='-', help="destination file (default stdout)")
    args = p.parse_args()

    classes = {}
    for path in args.paths:
        if path.endswith('.py'):
            classes[path] = classes_in_module(path)
        elif path.endswith('.dart'):
            # classes = DartClass.parse_file(open(args.path))
            raise NotImplementedError('todo: dart class parsing')
        else:
            raise ValueError(f'path {path} with unknown extension')
    outfile = sys.stdout if args.output == '-' else open(args.output, 'w')
    outfile.write('// generated by dartjsonclass (todo date + git sha)\n')
    by_name = {}
    for path, path_classes in classes.items():
        for cls in path_classes:
            if cls.__name__ in by_name:
                raise KeyError(f'duplicate {cls.__name__} in {path}')
            by_name[cls.__name__] = cls
    dart_classes = []
    for cls in by_name.values():
        dart_classes.append(pydantic_to_dart(cls))
    for cls in dart_classes:
        print(genclass(cls))
        raise NotImplementedError('todo: format it probably')

if __name__ == '__main__':
    main()
