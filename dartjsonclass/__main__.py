import argparse, sys
from .parser import DartClass
from .dartgen import genclass
from .codegen import format_exprs
from .pydantic_source import classes_in_module, pydantic_to_dart

def main():
    p = argparse.ArgumentParser()
    p.add_argument('paths', help="list of .py or .dart files to process", nargs='+')
    p.add_argument('-o', '--output', default='-', help="destination file (default stdout)")
    p.add_argument('--no-ser', action='store_true', help="omit json / map methods")
    p.add_argument('--no-meta', action='store_true', help="omit fields list + get/set methods")
    p.add_argument('--no-data', action='store_true', help="omit dataclass methods (copy, equal)")
    args = p.parse_args()

    if args.no_ser:
        raise NotImplementedError("we don't know how to omit json methods")

    classes = {}
    for path in args.paths:
        if path.endswith('.py'):
            classes[path] = classes_in_module(path)
        elif path.endswith('.dart'):
            # classes = DartClass.parse_file(open(args.path))
            raise NotImplementedError('todo: dart class parsing')
        else:
            raise ValueError(f'path {path} with unknown extension')
    outfile = sys.stdout if args.output == '-' else open(args.output, 'w')
    outfile.write('// generated by dartjsonclass (todo date + git sha)\n')
    outfile.write("import './jsonbase.dart';\n")
    outfile.write("import 'dart:convert';\n\n")
    by_name = {}
    for path, path_classes in classes.items():
        for cls in path_classes:
            if cls.__name__ in by_name:
                raise KeyError(f'duplicate {cls.__name__} in {path}')
            by_name[cls.__name__] = cls
    dart_classes = []
    for cls in by_name.values():
        dart_classes.append(pydantic_to_dart(cls))
    gen_cls = [
        genclass(cls, meta=not args.no_meta, data=not args.no_data)
        for cls in dart_classes
    ]
    for exprs in gen_cls:
        # todo: python source file + line
        outfile.write('\n'.join(format_exprs(exprs.render())))
        outfile.write('\n\n')

if __name__ == '__main__':
    main()
